Reference @amazonWebService@ from any of your Grails artefacts (controllers, domain, services...) to automatically inject it.

{code}
def amazonWebService
{code}

Or get it from @ctx@ if you want to test it in Grails console.

{code}
def amazonWebService = ctx.amazonWebService
{code}

You can then access any services directly from @amazonWebService@.

{code}
// Available service clients
amazonWebService.autoScaling
amazonWebService.cloudFormation
amazonWebService.cloudFront
amazonWebService.cloudSearch
amazonWebService.cloudSearchDomain
amazonWebService.cloudTrail
amazonWebService.cloudWatch
amazonWebService.codeDeploy
amazonWebService.cognitoIdentity
amazonWebService.cognitoSync
amazonWebService.config
amazonWebService.dynamoDB
amazonWebService.dynamoDBMapper
amazonWebService.ec2
amazonWebService.elasticBeanstalk
amazonWebService.elasticLoadBalancing
amazonWebService.elasticMapreduce
amazonWebService.elasticTranscoder
amazonWebService.elastiCache
amazonWebService.glacier
amazonWebService.iam
amazonWebService.importExport
amazonWebService.kinesis
amazonWebService.kms
amazonWebService.opsWorks
amazonWebService.rds
amazonWebService.redshift
amazonWebService.route53
amazonWebService.s3
amazonWebService.s3Encryption
amazonWebService.ses
amazonWebService.sdb
amazonWebService.sns
amazonWebService.sqs
amazonWebService.sqsBufferedAsync
amazonWebService.storageGateway
amazonWebService.swf
amazonWebService.transferManager
{code}

It will return an instance of Java client class extending "AmazonWebServiceClient":http://docs.amazonwebservices.com/AWSJavaSDK/latest/javadoc/com/amazonaws/AmazonWebServiceClient.html with default region endpoint (defined in our @Config.groovy@).

You can then call any available client methods.

To know available methods for each service clients, check the latest version of online "AWS SDK Java docs":http://docs.amazonwebservices.com/AWSJavaSDK/latest/javadoc/index.html.


h3. Custom region

If required, you can pass the region name, to get a client with a different region endpoint.

{code}
// Use SQS for region 'eu-west-1'
amazonWebService.getSqs('eu-west-1').sendMessage(new SendMessageRequest(queueUrl, messageBody))
{code}


h3. Async clients

If required, you can also get asynchronous client (which return Future on each async methods).

{code}
// Get async client
amazonWebService.sqsAsync.sendMessageAsync(new SendMessageRequest(queueUrl, messageBody))
// Get async client for region 'eu-west-1'
amazonWebService.getSqsAsync('eu-west-1').sendMessageAsync(new SendMessageRequest(queueUrl, messageBody))
{code}


h3. Exception handling

You should surround all your @amazonWebService@ client calls around try/catch block, in order to catch @AmazonServiceException@ or @AmazonClientException@.
